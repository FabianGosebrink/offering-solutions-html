<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aspnet on Fabian Gosebrink Angular and .NET Core Consulting, Training and Courses</title>
    <link>https://offering.solutions/tags/aspnet/</link>
    <description>Recent content in aspnet on Fabian Gosebrink Angular and .NET Core Consulting, Training and Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://offering.solutions/tags/aspnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The difference between AddMvc() and AddMvcCore()</title>
      <link>https://offering.solutions/blog/articles/2017/02/07/the-difference-between-addmvc-and-addmvccore/</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2017/02/07/the-difference-between-addmvc-and-addmvccore/</guid>
      <description>In this blog post I want to show you difference between the ASP.NET Core methods AddMvc() and AddMvcCore() when working with ASP.NET Core.
ASPNETCore-WebAPI-Sample
Startup.cs When creating an ASP.NET Core WebAPI you often see a Startup.cs file to configure your services and configure your pipeline. Thats what the methods ConfigureServices(IServiceCollection services) and Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) are for.
ConfigureServices is preparing your services for being used as you configure them.</description>
    </item>
    
    <item>
      <title>Angular, ASP.NET WebAPI, Azure &amp; Cordova, Cross Platform – My Private Hackathon Part 2</title>
      <link>https://offering.solutions/blog/articles/2016/04/26/angular-asp.net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-2/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2016/04/26/angular-asp.net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-2/</guid>
      <description>In the last blog postI lost a few words about the REST-API the FoodChooser is talking to. In this blog I want to talk about the clients I developed. This is: Angular, ASP.NET WebAPI, Azure &amp;amp; Cordova, Cross Platform – My Private Hackathon Part 2.
Well I started coding an AngularJs 1.x Client with Typecript which is available here
https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-AngularJS
Of course I could not stop looking and digging into Angular.</description>
    </item>
    
    <item>
      <title>Angular, ASP.NET WebAPI, Azure &amp; Cordova, Cross Platform – My Private Hackathon Part 1</title>
      <link>https://offering.solutions/blog/articles/2016/04/19/angular-asp.net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-1/</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2016/04/19/angular-asp.net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-1/</guid>
      <description>Motivation I had a few free hours and was curious and wanted to know what you can achieve in 9 hours of coding. Due to the fact that I am very into ASP.NET development with Angular I coded a small application which is based on ASP.NET Web API, AngularJs/Angular2 with Typescript &amp;amp; co. So the question is: How far will I go in 9 hours? This is my private Hackathon!!</description>
    </item>
    
    <item>
      <title>ASP.NET Unit Of Work with Entity Framework</title>
      <link>https://offering.solutions/blog/articles/2015/12/09/asp.net-unit-of-work-with-entity-framework/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/12/09/asp.net-unit-of-work-with-entity-framework/</guid>
      <description>I implemented a solution for the ASP.NET Unit Of Work with Entity Framework (see this post) and put all this into a NuGet-Package. And finally: Here it is!
Code Nuget: UnitOfWork by Offering.Solutions
Github: OfferingSolutions UnitOfWork with Entity Framework
This blog post has a sample-solution attached. Feel free to look into it. But before you do let me explain this package a bit. It will use the UnitOfWork, you will be able to use GenericRepositories and Customrepositories and everything is cached so that if you use the repositories in one using they only have to be created once.</description>
    </item>
    
    <item>
      <title>WebHooks with ASP.NET on Azure - DropBox and GitHub</title>
      <link>https://offering.solutions/blog/articles/2015/10/18/webhooks-with-asp.net-on-azure-dropbox-and-github/</link>
      <pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/10/18/webhooks-with-asp.net-on-azure-dropbox-and-github/</guid>
      <description>Hi,
in this post I want to show you how to use ASP.NET-WebHooks with an example of DropBox and Github. This app will be hostet on Windows-Azure and we&amp;rsquo;ll be using Visual Studio 2015.
The code in this example will be available on GitHub.
You can find a great summary here and here of what WebHooks exactly are. In short: You can receive updates from Websites and catch them with your own staying always up to date and seeing what is happening to your subscribed websites like Instagram, DropBox, GitHub etc.</description>
    </item>
    
    <item>
      <title>Token Authentication with Claims and ASP.NET WebAPI</title>
      <link>https://offering.solutions/blog/articles/2015/10/03/token-authentication-with-claims-and-asp.net-webapi/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/10/03/token-authentication-with-claims-and-asp.net-webapi/</guid>
      <description>In this post I would like to show you the most example about Token Authentication with Claims and ASP.NET WebAPI.
The sense behind this is:
 We ask the Server for a token We receive the token, store it client side and&amp;hellip; &amp;hellip;send it in the header on every request  The &amp;ldquo;problem&amp;rdquo; is that we do want to use all build in things Asp.Net WebAPI provides us. Microsoft serves us everything we need.</description>
    </item>
    
    <item>
      <title>AngularJS NgResource Demo with ASP.NET WebAPI</title>
      <link>https://offering.solutions/blog/articles/2015/08/25/angularjs-ngresource-demo-with-asp.net-webapi/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/08/25/angularjs-ngresource-demo-with-asp.net-webapi/</guid>
      <description>In this blog post I want to show an AngularJS NgResource Demo with ASP.NET WebAPI querying data as JSON.
Code: https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-NgResource-Demo
NgResource: https://docs.AngularJS.org/api/ngResource/service/$resource
The application The application follows the &amp;ldquo;normal&amp;rdquo; way of seperating the data access also on client side into services.
Preparation: Before you can use Angular&amp;rsquo;s ng resource you have to include it into your application like this:
(function () { &amp;#39;use strict&amp;#39;; angular .module(&amp;#39;AngularJSDemoApp&amp;#39;, [ &amp;#39;ngRoute&amp;#39;, &amp;#39;ngAnimate&amp;#39;, &amp;#39;ngResource&amp;#39;, &amp;#39;ui.</description>
    </item>
    
    <item>
      <title>How to build a great RESTful Service</title>
      <link>https://offering.solutions/blog/articles/2015/07/20/how-to-build-a-great-restful-service/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/07/20/how-to-build-a-great-restful-service/</guid>
      <description>In this blog post I want to get you an idea of how to build a great RESTful Service. The idea for this blog post came after I spent a whole post about implementing paging in a web API. Paging is a very important feature a REST API should offer. However, there are a lot more. Here I want to mention a few of them hoping to cover as much as you need to build great API’s ;-)</description>
    </item>
    
    <item>
      <title>Paging in einer ASP.Net WebAPI und AngularJS</title>
      <link>https://offering.solutions/blog/articles/2015/06/09/paging-in-einer-asp.net-webapi-und-angularjs/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/06/09/paging-in-einer-asp.net-webapi-und-angularjs/</guid>
      <description>In diesem Blog post will ich zeigen, wie man paging in einer ASP.NET WebAPI und AngularJS realisieren kann.
Eine gute API sollte mehrere Features anbieten. Eins davon ist Paging. In diesem Beispiel zeige ich Paging mit AngularJS und wie man es auf dem Client konsumieren kann.
Als erstes sollte man dem Client anbieten per Parameter nur eine bestimmte Anzahl von Einträgen abzurufen.
[Route(&amp;#34;myRoute&amp;#34;)] public IHttpActionResult Get(int start = 0, int count = 10) { //.</description>
    </item>
    
    <item>
      <title>ASP.NET WebAPI Datashaper to strip your json data</title>
      <link>https://offering.solutions/blog/articles/2015/05/30/asp.net-webapi-datashaper-to-strip-your-json-data/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/05/30/asp.net-webapi-datashaper-to-strip-your-json-data/</guid>
      <description>With this blog post I want to introduce you the ASP.NET WebAPI Datashaper to strip your json data before sending it back to the client.
The Datashaper gives you the possibility to strip the data you want to send based on the query of the client if you can not use Odata for a reason.
GitHub Project-Page NuGet
Demo
With this Nuget you can add the fields you want to receive in your request like:</description>
    </item>
    
    <item>
      <title>Eine REST API ist mehr als eine API – Moderne Architekturen für verteilte Systeme</title>
      <link>https://offering.solutions/blog/articles/2015/05/01/eine-rest-api-ist-mehr-als-eine-api-moderne-architekturen-f%C3%BCr-verteilte-systeme/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/05/01/eine-rest-api-ist-mehr-als-eine-api-moderne-architekturen-f%C3%BCr-verteilte-systeme/</guid>
      <description>In diesem Blog post möchte ich zeigen, wie wichtig eine API heutzutage ist. Frei nach dem Motto: Eine REST API ist mehr als eine API – Moderne Architekturen für verteilte Systeme
In der heutigen Zeit ist es absolut unabdingbar eine Software, die man für internen oder externen Gebrauch schreibt, auf mehreren Wegen verfügbar bzw. konsumierbar zu machen. Wichtig sind hierbei sicherlich Desktop-PCs, Smartphones und Tablets.
Völlig unabhängig der eingesetzten Technologie (ASP.</description>
    </item>
    
    <item>
      <title>ASP.NET - Clientseitige Webarchitekturen mit AngularJS</title>
      <link>https://offering.solutions/blog/articles/2014/11/02/asp.net-clientseitige-webarchitekturen-mit-angularjs/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/11/02/asp.net-clientseitige-webarchitekturen-mit-angularjs/</guid>
      <description>ASP.NET MVC hat, wie der Name schon sagt, die MVC-Struktur auf dem Server etabliert und es ist somit möglich saubere Architekturen auf dem Server zu erstellen.
Mehr und mehr geht die Richtung jedoch hin zu Mobile-First-Implementierungen. Hierbei spielt der Client, dabei meine ich die Tatsache, dass es ein Client ist, nicht welche Art von Client (Handy, Tablet etc.), eine immer grössere Rolle.
Wir tragen heute Rechner in unseren Hosentaschen, die stärker sind als die Desktop-Rechner vor 5 Jahren und man findet Rechenpower sehr viel schneller als zu damaliger Zeit.</description>
    </item>
    
    <item>
      <title>ASP.NET Repository Pattern und Unit of Work</title>
      <link>https://offering.solutions/blog/articles/2014/10/06/asp.net-repository-pattern-und-unit-of-work/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/10/06/asp.net-repository-pattern-und-unit-of-work/</guid>
      <description>In diesem Blog post möchte ich das ASP.NET Repository Pattern and Unit of Work vorstellen. In einem Informationssystem (z.B. Webapplikation) hat man normalerweise immer dasselbe Problem: Irgendwie muss man Daten persistieren und von der Oberfläche im Browser in die Datenbank hin- und wieder zurückschieben. Und dies findet man beinahe bei jedem Objekt (Person, Artikel, Blogeintrage, etc.). Vor allem fällt nach einer Zeit auf, dass die Operationen immer dieselben sind: Create/Read/Update und Delete geben sich die Klinke in die Hand.</description>
    </item>
    
    <item>
      <title>Impressions of the first ASP.NET MVC workshop</title>
      <link>https://offering.solutions/blog/articles/2014/08/10/impressions-of-the-first-asp.net-mvc-workshop/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/08/10/impressions-of-the-first-asp.net-mvc-workshop/</guid>
      <description>In this blog post I am doing a small recap to give you impressions of the first ASP.NET MVC workshop.
Even when I am not doing it in my current project at work I am very interested in ASP.NET and the ASP.NET MVC-Framework and everything which is needed to build modern web based applications.
Last Saturday my preparation for a very special workshop for me ended and I was glad to give five students the first ASP.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC - Generic Repositories and UnitOfWork</title>
      <link>https://offering.solutions/blog/articles/2014/07/01/asp.net-mvc-generic-repositories-and-unitofwork/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/07/01/asp.net-mvc-generic-repositories-and-unitofwork/</guid>
      <description>This is the third and the last blog post regarding ASP.NET MVC Architecture.
NugetPackage NugetPackage
Previous Posts ASP.NET MVC Architecture (Part I): Structurize your project with areas and services in ASP.NET MVC
ASP.NET MVC Architecture (Part II): Creating a business logic in ASP.NET MVC
Lets go In the first two posts I handled UI things, how to organize your areas (controller-services) and I showed a possibility to create your business-logic regarding area-Services and business-services.</description>
    </item>
    
    <item>
      <title>Creating a business logic in ASP.NET MVC</title>
      <link>https://offering.solutions/blog/articles/2014/06/10/creating-a-business-logic-in-asp.net-mvc/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/06/10/creating-a-business-logic-in-asp.net-mvc/</guid>
      <description>In this blog post I want to show you one possible way creating a business logic in ASP.NET MVC.
Okay, referring to my last blog postI want to take you one step further and extend the older post a little bit. In the last post we saw how to build up areas and to get them clean, with separated concerns and nice looking, testable etc.
But this is worth nothing if the rest you have is not well separated and you have a big mess there.</description>
    </item>
    
    <item>
      <title>Structure your project with areas and services in ASP.NET MVC</title>
      <link>https://offering.solutions/blog/articles/2014/06/01/structure-your-project-with-areas-and-services-in-asp.net-mvc/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/06/01/structure-your-project-with-areas-and-services-in-asp.net-mvc/</guid>
      <description>In this blog post I want to show you one possible way to structurize your project with areas and services in ASP.NET MVC.
This is the first part of several architecture posts I will publish in the next time.
The idea to this came up because I noticed that if you are implementing ASP.NET mvc-code you always come to a point where you have to invest some time in the architecture.</description>
    </item>
    
    <item>
      <title>How to include DotNet.HighCharts in ASP.NET MVC with ViewModels</title>
      <link>https://offering.solutions/blog/articles/2014/05/09/how-to-include-dotnet.highcharts-in-asp.net-mvc-with-viewmodels/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/05/09/how-to-include-dotnet.highcharts-in-asp.net-mvc-with-viewmodels/</guid>
      <description>Hey,
I want to show you how to include DotNet.HighCharts in ASP.NET MVC working with ViewModels.
A charting component is always very cool to see on your page and makes normal plain numbers good-looking.
Highcharts are available on Codeplex: DotNet.HighChartsI will not dive into this whole ViewModel thing. This is something very common in ASP.NET MVC and can also bee seen in the second blog I am working on: How to avoid ViewBag and ViewDataSo, lets start:</description>
    </item>
    
    <item>
      <title>Code-First with Entity Framework n:m relationship with additional information</title>
      <link>https://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/</link>
      <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/</guid>
      <description>In this blog post I want to show you a way to realize code First with Entity Framework n:m relationship with additional information.
a few days ago I faced the problem of having a normal N:M Relationship in EF with additional information in the table which keeps the two entities together.
Well, without having these additional information this is easy:
public class User { public int Id { get; set; } public string Username { get; set; } //.</description>
    </item>
    
    <item>
      <title>How to avoid ViewBag and ViewData in ASP.NET MVC</title>
      <link>https://offering.solutions/blog/articles/2014/03/08/how-to-avoid-viewbag-and-viewdata-in-asp.net-mvc/</link>
      <pubDate>Sat, 08 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/03/08/how-to-avoid-viewbag-and-viewdata-in-asp.net-mvc/</guid>
      <description>In this blog post I want to show you How to avoid ViewBag and ViewData in ASP.NET MVC.
It could be so easy: When passing data from the Controller to the View in MVC one can use
ViewBag.MyProperty = “ThisIsTheContentOfMyProperty”; or
ViewData[&amp;#34;MyProperty&amp;#34;] = MyProperty; And in the view you can access the data with:
@ViewBag.MyProperty or
ViewData[&amp;#34;MyProperty &amp;#34;] as ... But what about spelling problems? IntelliSense will not correct you if you would miss a character.</description>
    </item>
    
    <item>
      <title>How to install Ninject in ASP.NET WebAPI</title>
      <link>https://offering.solutions/blog/articles/2014/03/04/how-to-install-ninject-in-asp.net-webapi/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/03/04/how-to-install-ninject-in-asp.net-webapi/</guid>
      <description>In this blog post I want to show you how to install Ninject in ASP.NET WebAPI. Using Dependency-Injection is one of the most important things when implementing software. Code is much more testable and you have clearly ordered dependencies and an overview of what you injected where etc.
For ASP.NET MVC there are a lot of possibilities which you can use to achieve the DI-Goal. I tried a few (e.g. AutoFaq, Unity, etc.</description>
    </item>
    
    <item>
      <title>Using the Crypto-Namespace to Generate Salts and Compare Passwords</title>
      <link>https://offering.solutions/blog/articles/2014/03/03/using-the-crypto-namespace-to-generate-salts-and-compare-passwords/</link>
      <pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/03/03/using-the-crypto-namespace-to-generate-salts-and-compare-passwords/</guid>
      <description>In this blog post I want to show how to use the Crypto-Namespace to Generate Salts and Compare Passwords
Crypto.HashPassword MethodIf you are implementing a custom membership- and/or roleprovider (I wont go into custom providers because beside pictures of cats (with or without money or guns) and porn this is one of the most mentioned topics in the web) you should always store passwords with a salt.
With the crypted password and the salt you can compare the values during the login-process and set it during the registration process easily by using the Crypto-Namespace of ASP.</description>
    </item>
    
    <item>
      <title>Configure ASP.NET WebAPI to send data as JSON</title>
      <link>https://offering.solutions/blog/articles/2014/02/26/configure-asp.net-webapi-to-send-data-as-json/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/02/26/configure-asp.net-webapi-to-send-data-as-json/</guid>
      <description>Hey,
In this blog post I want to show you how to configure ASP.NET WebAPI to send data as JSON
ASP.NET WebAPI is normally sending data as XML. The standard data-format in Javascript frameworks like Knockout.js or Angular.js is normally JSON. So to get ASP.NET WebAPI using only JSON can be configured in the Register-Method in WebApiConfig.
Here in the first part you can see clearing all formatters first and then add the JsonMediaTypeFormatter as the only formatter WebApi knows for my application.</description>
    </item>
    
  </channel>
</rss>
