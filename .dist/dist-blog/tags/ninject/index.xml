<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ninject on Fabian Gosebrink Angular and ASP.NET Core Consulting, Training and Courses</title>
    <link>https://offering.solutions/tags/ninject/</link>
    <description>Recent content in ninject on Fabian Gosebrink Angular and ASP.NET Core Consulting, Training and Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://offering.solutions/tags/ninject/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to install Ninject in ASP.NET WebAPI</title>
      <link>https://offering.solutions/blog/articles/2014/03/04/how-to-install-ninject-in-asp.net-webapi/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/03/04/how-to-install-ninject-in-asp.net-webapi/</guid>
      <description>In this blog post I want to show you how to install Ninject in ASP.NET WebAPI. Using Dependency-Injection is one of the most important things when implementing software. Code is much more testable and you have clearly ordered dependencies and an overview of what you injected where etc.
For ASP.NET MVC there are a lot of possibilities which you can use to achieve the DI-Goal. I tried a few (e.g. AutoFaq, Unity, etc.</description>
    </item>
    
  </channel>
</rss>
