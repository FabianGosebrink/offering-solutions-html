<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>systemjs on Fabian Gosebrink Angular and ASP.NET Core Consulting, Training and Courses</title>
    <link>https://offering.solutions/tags/systemjs/</link>
    <description>Recent content in systemjs on Fabian Gosebrink Angular and ASP.NET Core Consulting, Training and Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://offering.solutions/tags/systemjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Moving your Angular application from SystemJS to Webpack</title>
      <link>https://offering.solutions/blog/articles/2017/02/26/moving-your-angular-application-from-systemjs-to-webpack/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2017/02/26/moving-your-angular-application-from-systemjs-to-webpack/</guid>
      <description>In this blog post I want to show you how you can move from an existing Angular application using systemjs to an application with webpack.
Imagine the following application.
app├── // modules, components and so on├── app.component.ts├── app.component.html├── app.module.ts└── main.ts...systemjs.config.jstsconfig.jsontslint.json...Because we want to get away from systemjs here we will first introduce a webpack.config.js which holds your configuration and which can handle all you files and stuff.</description>
    </item>
    
  </channel>
</rss>
