<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>entityframework on Fabian Gosebrink Angular and ASP.NET Core Consulting, Training and Courses</title>
    <link>https://offering.solutions/tags/entityframework/</link>
    <description>Recent content in entityframework on Fabian Gosebrink Angular and ASP.NET Core Consulting, Training and Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://offering.solutions/tags/entityframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get started with ASP.NET Core and Entity Framework 6</title>
      <link>https://offering.solutions/blog/articles/2015/12/13/get-started-with-asp.net-core-and-entity-framework-6/</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/12/13/get-started-with-asp.net-core-and-entity-framework-6/</guid>
      <description>Hey,
today I want to show you how to get started with ASP.NET 5 and Entity Framework 6.
If you start with the new templates for ASP.NET 5 you will notice in a short time that examples are going the EF 7 way. But if you want to stay at Entity Framework 6 as long as 7 is not in a final release or to move from an older version step by step you can follow this instructions here.</description>
    </item>
    
    <item>
      <title>ASP.NET Unit Of Work with Entity Framework</title>
      <link>https://offering.solutions/blog/articles/2015/12/09/asp.net-unit-of-work-with-entity-framework/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2015/12/09/asp.net-unit-of-work-with-entity-framework/</guid>
      <description>I implemented a solution for the ASP.NET Unit Of Work with Entity Framework (see this post) and put all this into a NuGet-Package. And finally: Here it is!
Code Nuget: UnitOfWork by Offering.Solutions
Github: OfferingSolutions UnitOfWork with Entity Framework
This blog post has a sample-solution attached. Feel free to look into it. But before you do let me explain this package a bit. It will use the UnitOfWork, you will be able to use GenericRepositories and Customrepositories and everything is cached so that if you use the repositories in one using they only have to be created once.</description>
    </item>
    
    <item>
      <title>Code-First with Entity Framework n:m relationship with additional information</title>
      <link>https://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/</link>
      <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/</guid>
      <description>In this blog post I want to show you a way to realize code First with Entity Framework n:m relationship with additional information.
a few days ago I faced the problem of having a normal N:M Relationship in EF with additional information in the table which keeps the two entities together.
Well, without having these additional information this is easy:
public class User { public int Id { get; set; } public string Username { get; set; } //.</description>
    </item>
    
  </channel>
</rss>
